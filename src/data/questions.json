[
  {
    "questionId": "1",
    "questionType": "Regex",
    "questionContent": "Provide a regular expression that matches either 'abc' or 'de'.",
    "answer": "(abc)∪(de)",
    "hints": "Remember, the '∪' operator denotes 'or' in regular expressions.",
    "score": 10,
    "alphabet": "abcde",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "2",
    "questionType": "Regex Accepts String",
    "questionContent": "Provide a string that is recognised by the given regular expression 'a*b*'.",
    "answer": "a*b*",
    "hints": "This regular expression matches strings with zero or more 'a' followed by zero or more 'b'.",
    "score": 10,
    "alphabet": "ab"
  },
  {
    "questionId": "3",
    "questionType": "Regex Equivalence",
    "questionContent": "Provide an equivalent regular expression to '(a∪b)*'.",
    "answer": "(a∪b)*",
    "hints": "The order of 'a' and 'b' in the expression does not matter.",
    "score": 10,
    "alphabet": "ab",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "4",
    "questionType": "Regex",
    "questionContent": "Provide a regular expression that matches 'abc' followed by zero or more 'd'.",
    "answer": "abc(d)*",
    "hints": "Remember, the '*' operator allows for zero or more repetitions.",
    "score": 15,
    "alphabet": "abcd",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "5",
    "questionType": "Regex Accepts String",
    "questionContent": "Provide a string that is recognised by the given regular expression '(a∪b)*c'.",
    "answer": "(a∪b)*c",
    "hints": "This regular expression matches strings with zero or more 'a' or 'b', followed by 'c'.",
    "score": 15,
    "alphabet": "abc"
  },
  {
    "questionId": "6",
    "questionType": "Regex Equivalence",
    "questionContent": "Provide an equivalent regular expression to '(a∪b)*c'.",
    "answer": "(a∪b)*c",
    "hints": "The order of 'a' and 'b' in the expression does not matter.",
    "score": 15,
    "alphabet": "abc",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "7",
    "questionType": "Regex",
    "questionContent": "Provide a regular expression that matches 'abc' followed by any number of 'd' or 'e'.",
    "answer": "abc((d∪e)*)",
    "hints": "Remember, the '*' operator allows for zero or more repetitions.",
    "score": 20,
    "alphabet": "abcde",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "8",
    "questionType": "Regex Accepts String",
    "questionContent": "Provide a string that is recognised by the given regular expression 'a*(b∪c)d*'.",
    "answer": "a*(b∪c)d*",
    "hints": "This regular expression matches strings with zero or more 'a', followed by 'b' or 'c', and then zero or more 'd'.",
    "score": 20,
    "alphabet": "abcd"
  },
  {
    "questionId": "9",
    "questionType": "Regex Equivalence",
    "questionContent": "Provide an equivalent regular expression to '(a∪b)(c∪d)*'.",
    "answer": "(a∪b)(c∪d)*",
    "hints": "The order of 'a' and 'b', and 'c' and 'd' in the expression does not matter.",
    "score": 20,
    "alphabet": "abcd",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "10",
    "questionType": "Regex",
    "questionContent": "Provide a regular expression that matches any string containing 'abc' or 'de' anywhere in it.",
    "answer": "(a ∪ b ∪ c ∪ d ∪ e)* (abc ∪ de) (a ∪ b ∪ c ∪ d ∪ e)*",
    "hints": "Remember, the '*' operator allows for zero or more repetitions.",
    "score": 25,
    "alphabet": "abcde",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "11",
    "questionType": "Regex Accepts String",
    "questionContent": "Provide a string that is recognised by the given regular expression '(a∪b)*c(d∪e)*'.",
    "answer": "(a∪b)*c(d∪e)*",
    "hints": "This regular expression matches strings with zero or more 'a' or 'b', followed by 'c', and then zero or more 'd' or 'e'.",
    "score": 25,
    "alphabet": "abcde"
  },
  {
    "questionId": "12",
    "questionType": "Regex Equivalence",
    "questionContent": "Provide an equivalent regular expression to '(a∪b)*c(d∪e)*'.",
    "answer": "(a∪b)*c(d∪e)*",
    "hints": "The order of 'a' and 'b', and 'c' and 'd' in the expression does not matter.",
    "score": 25,
    "alphabet": "abcde",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "test-1-1",
    "questionType": "Regex",
    "questionContent": "Provide a regular expression that contains exactly one b and at least two a's",
    "answer": "(baaa*)∪(abaa*)∪(aaba*)∪(aaa*b)",
    "hints": "Consider all the possible positions of the b in the string.",
    "score": 10,
    "alphabet": "ab",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "test-1-2",
    "questionType": "Regex",
    "questionContent": "Provide a regular expression that contains the substring acb at least three times.",
    "answer": "(a∪b∪c)*acb(a∪b∪c)*acb(a∪b∪c)*acb(a∪b∪c)*",
    "hints": [
      "There can be any number of alphabet characters before and after the substring.",
      "The substring can be repeated any number of times."
    ],
    "score": 10,
    "alphabet": "abc",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "test-1-3",
    "questionType": "Regex",
    "questionContent": "Provide a regular expression where every even position is a or b, every odd position is c or d.",
    "answer": "((c∪d)(a∪b))*∪(c∪d)((a∪b)(c∪d))*",
    "hints": [
      "Consider the possible positions of the c and d in the string.",
      "Consider the possible positions of the a and b in the string."
    ],
    "score": 10,
    "alphabet": "abcd",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "test-1-4",
    "questionType": "Regex",
    "questionContent": "Provide a regular expression where every odd position is b",
    "answer": "(b(a∪b))*(b∪ε)",
    "hints": [
      "Consider edge cases for odd positions.",
      "Consider the possible positions of the a in the string."
    ],
    "score": 10,
    "alphabet": "abε",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "test-1-5",
    "questionType": "Regex",
    "questionContent": "Provide a regular expression that contains at most one a.",
    "answer": "b*ab*∪b*",
    "hints": [
      "Consider the possible positions of the a in the string.",
      "Consider the possible positions of the b in the string."
    ],
    "score": 10,
    "alphabet": "ab",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "regex-auto-1-3",
    "questionType": "Automaton to Regex",
    "questionContent": "Convert the given automaton to a regular expression.",
    "answer": "(a∪b)*c(d∪e)*",
    "hints": [
      "Consider the possible paths from the start state to the final state."
    ],
    "score": 10,
    "alphabet": "abcde",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "regex-auto-1-1",
    "questionType": "Automaton to Regex",
    "questionContent": "Convert the given automaton to a regular expression.",
    "answer": "a*b*",
    "hints": [
      "Consider the possible paths from the start state to the final state."
    ],
    "score": 10,
    "alphabet": "ab",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "regex-auto-1-2",
    "questionType": "Automaton to Regex",
    "questionContent": "Convert the given automaton to a regular expression.",
    "answer": "a*b(a*b)*a*",
    "hints": [
      "Consider the possible paths from the start state to the final state."
    ],
    "score": 10,
    "alphabet": "ab",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "regex-auto-1-4",
    "questionType": "Automaton to Regex",
    "questionContent": "Convert the given automaton to a regular expression.",
    "answer": "(aba∪b)*",
    "hints": [
      "Consider the possible paths from the start state to the final state."
    ],
    "score": 10,
    "alphabet": "ab",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "regex-auto-1-5",
    "questionType": "Automaton to Regex",
    "questionContent": "Convert the given automaton to a regular expression.",
    "answer": "aaa*∪(a∪b)*",
    "hints": [
      "Consider the possible paths from the start state to the final state."
    ],
    "score": 10,
    "alphabet": "ab",
    "operators": [
      "∪",
      "*",
      "(",
      ")"
    ]
  },
  {
    "questionId": "auto-1-1",
    "questionType": "Construct Automaton",
    "questionContent": "Construct an automaton that accepts the language of strings that start with at least two a's followed by one b.",
    "answer": "aaa*b",
    "hints": [
      "Consider the what happens if this pattern is ever broken."
    ],
    "score": 10,
    "alphabet": "ab"
  },
  {
    "questionId": "auto-1-2",
    "questionType": "Construct Automaton",
    "questionContent": "Construct an automaton that accepts the language of strings that accepts exactly one a and exactly one b.",
    "answer": "(ab)|(ba)",
    "hints": [
      "Consider the permutations."
    ],
    "score": 10,
    "alphabet": "ab"
  }
]
